%!PS-Adobe-3.0 EPSF-3.0
%%HiResBoundingBox: 0.000000 0.000000 920.000000 780.000000
%APL_DSC_Encoding: UTF8
%APLProducer: (Versie 12.3.1 (build 21E258) Quartz PS Context)
%%Title: (Unknown)
%%Creator: (Unknown)
%%CreationDate: (Unknown)
%%For: (Unknown)
%%DocumentData: Clean7Bit
%%LanguageLevel: 2
%%Pages: 1
%%BoundingBox: 0 0 920 780
%%EndComments
%%BeginProlog
%%BeginFile: cg-pdf.ps
%%Copyright: Copyright 2000-2004 Apple Computer Incorporated.
%%Copyright: All Rights Reserved.
currentpacking true setpacking
/cg_md 141 dict def
cg_md begin
/L3? languagelevel 3 ge def
/bd{bind def}bind def
/ld{load def}bd
/xs{exch store}bd
/xd{exch def}bd
/cmmtx matrix def
mark
/sc/setcolor
/scs/setcolorspace
/dr/defineresource
/fr/findresource
/T/true
/F/false
/d/setdash
/w/setlinewidth
/J/setlinecap
/j/setlinejoin
/M/setmiterlimit
/i/setflat
/rc/rectclip
/rf/rectfill
/rs/rectstroke
/f/fill
/f*/eofill
/sf/selectfont
/s/show
%/as/ashow
/xS/xshow
/yS/yshow
/xyS/xyshow
/S/stroke
/m/moveto
/l/lineto
/c/curveto
/h/closepath
/n/newpath
/q/gsave
/Q/grestore
counttomark 2 idiv
%dup (number of ld's = )print == flush	% *** how many 
{ld}repeat pop
/SC{	% CSname
    /ColorSpace fr scs
}bd
/sopr /setoverprint where{pop/setoverprint}{/pop}ifelse ld
/soprm /setoverprintmode where{pop/setoverprintmode}{/pop}ifelse ld
/cgmtx matrix def
/sdmtx{cgmtx currentmatrix pop}bd
/CM {cgmtx setmatrix}bd		% pop the ctm: our gstate ctm on host is now identity
/cm {cmmtx astore CM concat}bd	% reset the matrix and then concat
/W{clip newpath}bd
/W*{eoclip newpath}bd

statusdict begin product end dup (HP) anchorsearch{
    pop pop pop	% pop off the search results
    true
}{
    pop	% previous search result
   (hp) anchorsearch{
	pop pop true
    }{
	pop false
    }ifelse
}ifelse

{	% HP is the product: we use this method of stroking because of a bug in their clone printers with certain T3 fonts
    { 
	{ % charCode Wx Wy
	    pop pop % charCode
	    (0)dup 0 4 -1 roll put
	    F charpath
	}cshow
    }
}{
    {F charpath}
}ifelse
/cply exch bd
/cps {cply stroke}bd
/pgsave 0 def
/bp{/pgsave save store}bd
/ep{pgsave restore showpage}def		% dont' bind
/re{4 2 roll m 1 index 0 rlineto 0 exch rlineto neg 0 rlineto h}bd

/scrdict 10 dict def
/scrmtx matrix def
/patarray 0 def
/createpat{patarray 3 1 roll put}bd
/makepat{
scrmtx astore pop
gsave
initgraphics
CM 
patarray exch get
scrmtx
makepattern
grestore
setpattern
}bd

/cg_BeginEPSF{
    userdict save/cg_b4_Inc_state exch put
    userdict/cg_endepsf/cg_EndEPSF load put
    count userdict/cg_op_count 3 -1 roll put 
    countdictstack dup array dictstack userdict/cg_dict_array 3 -1 roll put
    3 sub{end}repeat
    /showpage {} def
    0 setgray 0 setlinecap 1 setlinewidth 0 setlinejoin
    10 setmiterlimit [] 0 setdash newpath
    false setstrokeadjust false setoverprint	% don't use F
}bd
/cg_EndEPSF{
  countdictstack 3 sub { end } repeat
  cg_dict_array 3 1 index length 3 sub getinterval
  {begin}forall
  count userdict/cg_op_count get sub{pop}repeat
  userdict/cg_b4_Inc_state get restore
  F setpacking
}bd

/cg_biproc{currentfile/RunLengthDecode filter}bd
/cg_aiproc{currentfile/ASCII85Decode filter/RunLengthDecode filter}bd
/ImageDataSource 0 def
L3?{
    /cg_mibiproc{pop pop/ImageDataSource{cg_biproc}def}bd
    /cg_miaiproc{pop pop/ImageDataSource{cg_aiproc}def}bd
}{
    /ImageBandMask 0 def
    /ImageBandData 0 def
    /cg_mibiproc{
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/RunLengthDecode filter dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
    /cg_miaiproc{	
	string/ImageBandMask xs
	string/ImageBandData xs
	/ImageDataSource{[currentfile/ASCII85Decode filter/RunLengthDecode filter
	    dup ImageBandMask/readstring cvx
	    /pop cvx dup ImageBandData/readstring cvx/pop cvx]cvx bind}bd
    }bd
}ifelse
/imsave 0 def
/BI{save/imsave xd mark}bd
/EI{imsave restore}bd
/ID{
counttomark 2 idiv
dup 2 add	% leave room for imagetype and imagematrix
dict begin
{def} repeat
pop		% remove mark
/ImageType 1 def
/ImageMatrix[Width 0 0 Height neg 0 Height]def
currentdict dup/ImageMask known{ImageMask}{F}ifelse exch
% currentdict on stack
L3?{
    dup/MaskedImage known
    { 
	pop
	<<
	    /ImageType 3
	    /InterleaveType 2
	    /DataDict currentdict
	    /MaskDict
	    <<  /ImageType 1
		/Width Width
		/Height Height
		/ImageMatrix ImageMatrix
		/BitsPerComponent 1
		/Decode [0 1]
		currentdict/Interpolate known
		{/Interpolate Interpolate}if
	    >>
	>>
    }if
}if
exch
{imagemask}{image}ifelse	
end	% pop imagedict from dict stack
}bd

/cguidfix{statusdict begin mark version end
{cvr}stopped{cleartomark 0}{exch pop}ifelse
2012 lt{dup findfont dup length dict begin
{1 index/FID ne 2 index/UniqueID ne and
{def} {pop pop} ifelse}forall
currentdict end definefont pop
}{pop}ifelse
}bd
/t_array 0 def
/t_i 0 def
/t_c 1 string def
/x_proc{ % x y
    exch t_array t_i get add exch moveto
    /t_i t_i 1 add store
}bd
/y_proc{ % x y
    t_array t_i get add moveto
    /t_i t_i 1 add store
}bd
/xy_proc{
        % x y
	t_array t_i 2 copy 1 add get 3 1 roll get 
	4 -1 roll add 3 1 roll add moveto
	/t_i t_i 2 add store
}bd
/sop 0 def		% don't bind sop
/cp_proc/x_proc ld 	% default moveto proc is for xwidths only
/base_charpath		% string array
{
    /t_array xs
    /t_i 0 def
    { % char
	t_c 0 3 -1 roll put
        currentpoint
	t_c cply sop
        cp_proc
    }forall
    /t_array 0 def
}bd
/sop/stroke ld		% default sop is stroke. Done here so we don't bind in /base_charpath 

% default sop is stroke
/nop{}def
/xsp/base_charpath ld
/ysp{/cp_proc/y_proc ld base_charpath/cp_proc/x_proc ld}bd
/xysp{/cp_proc/xy_proc ld base_charpath/cp_proc/x_proc ld}bd
/xmp{/sop/nop ld /cp_proc/x_proc ld base_charpath/sop/stroke ld}bd
/ymp{/sop/nop ld /cp_proc/y_proc ld base_charpath/sop/stroke ld}bd
/xymp{/sop/nop ld /cp_proc/xy_proc ld base_charpath/sop/stroke ld}bd
/refnt{ % newname encoding fontname
findfont dup length dict copy dup
/Encoding 4 -1 roll put 
definefont pop
}bd
/renmfont{ % newname fontname
findfont dup length dict copy definefont pop
}bd

L3? dup dup{save exch}if

% languagelevel2 ONLY code goes here

/Range 0 def
/DataSource 0 def
/val 0 def
/nRange 0 def
/mulRange 0 def
/d0 0 def
/r0 0 def
/di 0 def
/ri 0 def
/a0 0 def
/a1 0 def
/r1 0 def
/r2 0 def
/dx 0 def
/Nsteps 0 def
/sh3tp 0 def
/ymax 0 def
/ymin 0 def
/xmax 0 def
/xmin 0 def

/setupFunEval % funDict -- 	% this calculates and sets up a function dict for evaulation.
{
    begin
	/nRange Range length 2 idiv store
	/mulRange   % precompute the range data needed to map a sample value from the table to a range value
		    % this data looks like [ range0mul range0min range1mul range1min ... rangeN-1mul rangeN-1min ]
	[ 
	    0 1 nRange 1 sub
	    { % index
		    2 mul/nDim2 xd		% 2*dimension# we are dealing with
		    Range nDim2 get		% ymin
		    Range nDim2 1 add get	% ymin ymax 
		    1 index sub			% ymin (ymax-ymin)
						% xmin = 0, xmax = 255 (2^bitspersample - 1)
		    255 div			% ymin (ymax-ymin)/(xmax - xmin)
		    exch			% (ymax-ymin)/(xmax - xmin) ymin
	    }for
	]store
    end
}bd

/FunEval % val1 fundict -> comp1 comp2 ... compN
{
    begin
	% the value passed in is the base index into the table
	nRange mul /val xd	% compute the actual index to the table
				% since there are nRange entries per base index
	0 1 nRange 1 sub
	{
	    dup 2 mul/nDim2 xd % dim
	    val	% base value to use to do our lookup
	    add DataSource exch get %  lookedupval
	    mulRange nDim2 get mul 	% lookedupval*(ymax-ymin)/(xmax-xmin)
	    mulRange nDim2 1 add get % lookedupval*(ymax-ymin)/(xmax-xmin) ymin
	    add % interpolated result
	}for	% comp1 comp2 ... compN
    end
}bd

/max % a b -> max(a, b)
{
	2 copy lt
	{exch pop}{pop}ifelse
}bd

/sh2
{	% emulation of shading type 2. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 x1 y1
	3 index 3 index translate	% origin is now at beginning point of shading
					% x0 y0 x1 y1
	3 -1 roll sub	% x0 x1 y1-y0
	3 1 roll exch 	% y1-y0 x1 x0
	sub				% y1-y0 x1-x0
	2 copy
	dup mul exch dup mul add sqrt	% length of segment between two points
	dup
	scale  
	atan	% atan (dy/dx)
	%dup (rotation angle = )print ==
	rotate		% now line between 0,0 and 1,0 is the line perpendicular to which the axial lines are drawn					
	
	/Function load setupFunEval	% may need to setup function dictionary by calling setupFunEval
	
	% this is now specific to axial shadings. Compute the maximum bounds to fill
	clippath {pathbbox}stopped {0 0 0 0}if newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs
	currentdict/Extend known
	{
		/Extend load 0 get
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			xmin ymin xmin abs ymax ymin sub rectfill
		}if
	}if
	% paint the rects. The sampling frequency is that of our table
	/Nsteps/Function load/Size get 0 get 1 sub store
	/dx 1 Nsteps div store
	gsave
		/di ymax ymin sub store
		/Function load
		% loop Nsteps + 1 times, incrementing the index by 1 each time
		0 1 Nsteps
		{
			1 index FunEval sc
			0 ymin dx di rectfill
			dx 0 translate
		}for
		pop	% pop our function
	grestore	% origin is back to start point
	currentdict/Extend known
	{
		/Extend load 1 get
		{	
			Nsteps/Function load FunEval sc	% last element
			1 ymin xmax 1 sub abs ymax ymin sub rectfill
		}if
	}if
}bd

/shp	% this paints our shape for shading type 3
{	% x1 r1 x0 r0 -
	4 copy

	% fill interior arc
	dup 0 gt{
		0 exch a1 a0 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a0 a1 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill

	% fill exterior arc
	dup 0 gt{
		0 exch a0 a1 arc
	}{
		pop 0 moveto
	}ifelse

	dup 0 gt{
		0 exch a1 a0 arcn
	}{
		pop 0 lineto
	}ifelse
	
	fill
}bd

/calcmaxs
{	% calculate maximum distance vector from origin to corner points
	% of bbox
	xmin dup mul ymin dup mul add sqrt		% (xmin2 + ymin2)
	xmax dup mul ymin dup mul add sqrt		% (xmax2 + ymin2)
	xmin dup mul ymax dup mul add sqrt		% (xmin2 + ymax2)
	xmax dup mul ymax dup mul add sqrt		% (xmax2 + ymax2)
	max max max								% maximum value
}bd

/sh3
{	% emulation of shading type 3. Assumes shading dictionary is top dictionary on the dict stack
	/Coords load aload pop 	% x0 y0 r1 x1 y1 r2
	5 index 5 index translate	% origin is now at first circle origin
	3 -1 roll 6 -1 roll sub		% y0 r1 y1 r2 dx
	3 -1 roll 5 -1 roll sub		% r1 r2 dx dy
	2 copy dup mul exch dup mul add sqrt
	/dx xs						% r1 r2 dx dy
	2 copy 0 ne exch 0 ne or
	{
		% r1 r2 dx dy
		exch atan rotate	% we are now rotated so dy is zero and positive values of dx move us as expected
	}{
		pop pop
	}ifelse
	% r1 r2		
	/r2 xs
	/r1 xs
	/Function load 
	dup/Size get 0 get 1 sub	% this is the size of our table minus 1
	/Nsteps xs		% at some point we should optimize this better so NSteps is based on needed steps for the device
	setupFunEval		% may need to setup function dictionary by calling setupFunEval
	% determine the case:
	% case 0: circle1 inside circle2
	% case 1: circle 2 inside circle 1
	% case 2: r1 = r2 
	% case 3: r1 != r2
	dx r2 add r1 lt{
		% circle 2 inside of circle 1
		0 
	}{
		dx r1 add r2 le
		{ % circle 1 inside of circle 2
			1
		}{ % circles don't contain each other
			r1 r2 eq
			{	% equal
				2
			}{ % r1 != r2
				3
			}ifelse		
		}ifelse
	}ifelse
	/sh3tp xs		% sh3tp has the number of our different cases
	clippath {pathbbox}stopped {0 0 0 0}if 
	newpath 	% x0 y0 x1 y1
	/ymax xs
	/xmax xs
	/ymin xs
	/xmin xs

	% Arc angle atan( sqrt((dx*dx + dy*dy) - dr*dr), dr)
	dx dup mul r2 r1 sub dup mul sub dup 0 gt
	{
		sqrt r2 r1 sub atan
		/a0 exch 180 exch sub store 
		/a1 a0 neg store 
	}{
		pop
		/a0 0 store
		/a1 360 store		
	}ifelse		

	currentdict/Extend known
	{
		/Extend load 0 get r1 0 gt and	% no need to extend if the radius of the first end is 0
		{	
			0/Function load FunEval sc	% evaluate the function to get a color and set it
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{	% case 0
					dx 0 r1 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				}
				{	% case 1
					r1 0 gt{0 0 r1 0 360 arc fill}if
				}
				{	% case 2
					% r1 == r2, extend 0
					% r3 = r, x3 = -(abs(minx) + r), x1 = 0
				
					% x(i+1) r(i+1) x(i) r(i) shp
					0 r1 xmin abs r1 add neg r1 shp
				}
				{	% case 3
					% no containment, r1 != r2
				
					r2 r1 gt{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1
						r1 neg r2 r1 sub div dx mul	% this is point of beginning circle
						0	% point of ending circle
						shp	% takes x(i+1) r(i+1) x(i) r(i)
					}{	% the first circle is the bigger of the two
						% we find a circle on our line which is outside the bbox in the
						% negative direction
						% x(i+1) r(i+1) x(i) r(i) shp
						0 r1 calcmaxs	% 0 r1 maxs
						dup
						% calculating xs: (-(maxs+r2)*x2)/(x2-(r1-r2))
						r2 add dx mul dx r1 r2 sub sub div
						neg				% maxs xs'
						exch 1 index	% xs' maxs xs'
						abs exch sub
						shp
					}ifelse
				} 
			}sh3tp get exec	% execute the extend at beginning proc for our shading type
		}if
	}if

	% now do the shading
	/d0 0 store
	/r0 r1 store
	/di dx Nsteps div store
	/ri r2 r1 sub Nsteps div store 
	/Function load 
	0 1 Nsteps
	{	% function t(i)
		1 index FunEval sc
		d0 di add r0 ri add d0 r0 shp
		{
		% fill interior arc
		d0 0 r0 a1 a0 arc
		d0 di add 0 r0 ri add a0 a1 arcn
		fill
		
		% fill exterior arc
		d0 0 r0 a0 a1 arc
		d0 di add 0 r0 ri add a1 a0 arcn
		fill
		}pop
		
		% advance to next
		/d0 d0 di add store
		/r0 r0 ri add store
	}for
	pop	% pop our function dict

	% handle Extend
	currentdict/Extend known
	{
		/Extend load 1 get r2 0 gt and	% no need to extend if the radius of the last end is 0
		{	
			Nsteps/Function load FunEval sc	% last element
			% case 0: circle1 inside circle2
			% case 1: circle 2 inside circle 1
			% case 2: circles don't contain each other and r1 == r2
			% case 3: circles don't contain each other and r1 != r2
			{ 
				{
					dx 0 r2 0 360 arc fill
				} 
				{
					dx 0 r2 360 0 arcn
					xmin ymin moveto
					xmax ymin lineto
					xmax ymax lineto
					xmin ymax lineto
					xmin ymin lineto
					eofill		% for the bigger radius we fill everything except our circle
				} 
				{	% r1 == r2, extend 1
					% r3 = r, x3 = (abs(xmax) + r), x1 = dx
					% x(i+1) r(i+1) x(i) r(i) shp
					xmax abs r1 add r1 dx r1 shp
				}	
				{	% no containment, r1 != r2
			
					r2 r1 gt{
						% we find a circle on our line which is outside the bbox in the
						% positive direction
						% x(i+1) r(i+1) x(i) r(i) shp
						calcmaxs dup	% maxs maxs
						% calculating xs: ((maxs+r1)*x2)/(x2-(r2-r1))
						r1 add dx mul dx r2 r1 sub sub div	% maxs xs
						exch 1 index	% xs maxs xs
						exch sub
						dx r2
						shp
					}{	% the endpoint we are drawing is that with a circle of zero radius
						% x(i+1) r(i+1) x(i) r(i) shp
						r1 neg r2 r1 sub div dx mul	% this is point of ending circle
						0		% radius of ending circle
						dx 		% point of starting circle
						r2		% radius of starting circle
						shp
					}ifelse
				}
			}			
			sh3tp get exec	% execute the extend at end proc for our shading type
		}if
	}if
}bd
/sh		% emulation of shfill operator for type 2 and type 3 shadings based on type 0 functions
{	% shadingDict --
	begin
		/ShadingType load dup dup 2 eq exch 3 eq or
		{	% shadingtype
			gsave
				newpath
				/ColorSpace load scs
				currentdict/BBox known
				{
					/BBox load aload pop	% llx lly urx ury
					2 index sub				% llx lly urx ury-lly
					3 index					% llx lly urx ury-lly llx
					3 -1 roll exch sub 
					exch rectclip
				}if
				2 eq
				{sh2}{sh3}ifelse
			grestore
		}{
			% shadingtype
			pop 
			(DEBUG: shading type unimplemented\n)print flush
		}ifelse
	end
}bd

% end of language level 2 ONLY code

{restore}if not dup{save exch}if
% languagelevel3 ONLY code goes here
	L3?{	% we do these loads conditionally or else they will fail on a level 2 printer
		/sh/shfill ld
		/csq/clipsave ld
		/csQ/cliprestore ld
	}if
{restore}if

%currentdict dup maxlength exch length sub (number of extra slots in md = )print == flush	% *** how many entries are free
end
setpacking
% count 0 ne { pstack(***extras on stack during prolog execution***\n)print flush}if	% *** BARK if anything is left on stack
%%EndFile
%%EndProlog
%%BeginSetup
%%EndSetup
%%Page: 1 1
%%PageBoundingBox: 0 0 920 780
%%BeginPageSetup
cg_md begin
bp
sdmtx
%RBIBeginFontSubset: OpenSans
%!FontType1-1.0: OpenSans 1.0000.1.1000
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
14 dict begin
/FontName /OpenSans def
/PaintType 0 def
/Encoding 256 array 0 1 255 {1 index exch/.notdef put} for
dup 33 /G put
dup 34 /e put
dup 35 /r put
dup 36 /i put
dup 37 /c put
dup 38 /h put
dup 39 /t put
dup 40 /space put
dup 41 /I put
dup 42 /n put
dup 43 /a put
dup 44 /s put
dup 45 /A put
dup 46 /f put
dup 47 /p put
dup 48 /k put
dup 49 /v put
dup 50 /l put
dup 51 /g put
dup 52 /S put
dup 53 /three put
dup 54 /B put
dup 55 /m put
dup 56 /o put
dup 57 /w put
dup 58 /W put
dup 59 /O put
dup 60 /j put
dup 61 /u put
dup 62 /V put
dup 63 /d put
dup 64 /D put
dup 65 /Z put
dup 66 /P put
readonly def
42/FontType resourcestatus{pop pop false}{true}ifelse
%APLsfntBegin
{currentfile 0(%APLsfntEnd\n)/SubFileDecode filter flushfile}if
/FontType 42 def
/FontMatrix matrix def
/FontBBox[2048 -1126 1 index div -555 2 index div 2466 3 index div 2146 5 -1 roll div]cvx def
/sfnts [<







1F26341055253324551913FF1F0704FF1F0603FF1F4A49331F4946251F1333125505010355043303551F03010F033F03AF03034746191FEB4601233322551C331B551633155511010F5510330F550F0F4F0F021F0FCF0F020F0FFF0F020602010055013300556F007F00AF00EF00041000018016010501B80190B154532B2B4BB807FF524BB009505BB00188B02553B00188B040515AB00688B000555A5B58B101018E59858D8D00421D4BB0325358B0201D594BB0645358B0101DB11600425973732B2B5E7374752B2B2B2B2B742B73742B2B2B2B2B2B2B2B2B2B2B2B2B73742B2B2B185E000000
00>] def
/CharStrings 35 dict dup begin
/.notdef 0 def
/space 1 def
/three 2 def
/A 3 def
/B 4 def
/D 5 def
/G 6 def
/O 7 def
/P 8 def
/S 9 def
/V 10 def
/W 11 def
/Z 12 def
/a 13 def
/c 14 def
/d 15 def
/e 16 def
/f 17 def
/g 18 def
/h 19 def
/i 20 def
/j 21 def
/k 22 def
/l 23 def
/m 24 def
/n 25 def
/o 26 def
/p 27 def
/r 28 def
/s 29 def
/t 30 def
/u 31 def
/v 32 def
/w 33 def
/I 34 def
 end readonly def
currentdict dup/FontName get exch definefont pop end
%APLsfntEnd
42/FontType resourcestatus{pop pop true}{false}ifelse
{currentfile 0(%APLT1End\n)/SubFileDecode filter flushfile}if
/FontInfo 1 dict dup begin
/FSType 8 def
end readonly def
/FontType 1 def
/FontMatrix [ 0.00048828125 0 0 0.00048828125 0 0 ] readonly def
/FontBBox {-1126 -555 2466 2146} readonly def
/UniqueID 4019644 def
currentdict end
currentfile eexec
54544758EC884CF30C3CD503CEDBFF3839C47C3C3333173232E3FDBFF439491DB843E1924E63AA7726BBB0485AB56D93D8C0906F647A47162891E73FFC2A9873C4B1EAC5EEBDFFC4D06084FBD84139DF4583C6E259D10699944D1068C9C45667DCCCFB9B7EA01B606435EDCBD273ABAC093D14085CCBAC149BD7382E842CFE0D7FE4FD2EF589A2471F6074A80A8B675C2F7A50D63AC1EF90D787BADD11633CB01CF6EE3B37AAF9078A69AC4740E9B6525D78BBD839551A1CB80DB8682FA5E87591BBD6EE8B946063A2A58D9CA3685AB305495DC5FB5747EB8A9A059C4976C0FE4EEAB1D56FF47F1E9664ED9F4A7DAB763AF92B2F6CF2FA7DEC24710E0B9096E30F772BA7FEA9BDBE496C42ED2CEB58F54E80BDF57CE7B4DB6CCFE7182F43BF93CCA0767AF95D62C5D2C3DC6AE1E6D139F51A2C63432117F1714C5566572EE9967A715420ABDCD1D7BD74F8450B89965FCC81C6ACA565C5F3CCF91D430D1F953E4F1A645300A98DD8C47CD64555F08F422340A85404EAE0D3229C4F9336B9470CACBD6BBF3395104750A915CC6EAAC197668267B8C62D2764C8CD69FD937CA3C924D997A0EDE7964BEB9EA2F92EF70C5E5DA0AA55675454E59AEC12A68086DDD95476477C46AE143377694529C58844212FC811560E27EEE2CF00BCB28031C17829BEE98293CCF96BAF13971F3C4CDD5E6FE2DD02A8EDB11A7BE32721504CBB9C68ECE180A36D594662BC86A83524445436396C0385216433EB18973512DA4A3406D345591631BF4737551129D426475E9E0E90853461A4BBE4047B7C614C6E678BE63DED21DA3E41F73BEDB6856ABB22F2DF9ADA9318E29A0841AEDF683D06FCAB1D514A5924640890A8005A29C0BC74BD669D0328C916A0DFA89B47126B7A63BF1199BC579A4758D59ACAECD4A3377AD11CFCC3D709B3EBA0A8B46573E616362A652C94E6609A597849397C14719B9B1EA7D386FBD8E82ACBC0ACEBFB20244C3DE840882EB4113DF2436CF9ED4D4A8DE65BCBC5C254F39C63CEBB41F516FA37B114BE6C0739B06E80B04AF29713B961273E15355070183F96E313EF23DA95748EFC7A17640630B11B7A62D6EED050FB5C708E8D402B8F0004376FF2BFBEB9D787C9CF64A9C1AF60D10BA4AA68272DC336FF71E56B22E50B133526C7E775791644EA7B217A5C40D94BD0DA18C78901FD9FF325E05D583F5CD102FA119265B7940DC95FF12FEED09DE86DA8DD6AAF64C70960CFE680039F7BFCAF73B8B639891C51E12D5D1EFD5A0E6E4EA11E1385C152C6CA761D165C3F08ACEB6B888502C1860B58F210C3437B8DF59CF4C3667FACA96E64136A1EA6DA79F9CD86C0F3A4978E0B3BCDDFE7201D63CA2FFC29AFC00184D26F6DEA8138AF6A5B401D2ECEBFBAAED2BAAAFFED81E17D5E7FF147A82D53C1B3788A92F7DBC9E75026A6DB1B30E204
2EDBBDB6E65A6E194A6B21AD3AFEC4DABF26E015BAA399635C0AD06CFBC0FAF5E2E78E47875B1FDED3A0D9251248991E8BE60787BBBA4EB0E8E8FF14C8DF726B708E0D8450E7916ADB89D53B6B8CE6578000F1051C11BB9536D51D1EE30F7231BFE5B86ED8D8AD3B3CBFD8A420C18FE5DF59057FD93675E863D410C9EE1F16A673F53436218935D7BBBE168771F960DD4CA203EB2AF12ADD1279177420BB5F9996A6644B60790B509FBAAF29B03C5992C3A434B84D66B6676C35C971584C3B0915E6FD999A3410068BFD0C38C7B58A9ED34E4903C1346489A57CD4A5DCAAD83008667AE5FA33D6FCA3B575AE3BE12C6CA014E3F23AE58FD612E63531ABFCBD7492D84012ADE84C982D64B4D7E20AB12C2DA89F65382789FBB8B35FB44DDE852B7169E36BC7DACF522396D71167FBF335B854893CC13DCB44E17ECB7ED9A58B40F2ADF100DF59E1830B4C121B6DDB3D23BA3E8C3E0CF1767C48A6527295174830215E27FF47E4E296B17609FBA3F453487074F8C8D30F24ABD4966566EE6C761ACA4E99F5CD69B0B6928CD005806C970D213EB6E904AB0809946CE3F71A3D898590BDF6A6EBD18F039AA0D3F4A4894E475A1D40EE4910A6E1CC33EBF3B3F630315450AAA1620B2E24E45585B0937924B036FB6B3BAF45EFE483E16DC77F3969EBC687A7C0AED5629E4AFB23DEA53ADE822F92874B9295D57A94CE32AA1A56DE5D22FEA5EC095073C1A6EC6FF81E633FD1BD811378E94718CE99341D8E4E5B4646457AFDEEDC77783857610B0BD9DCEDED11CEA3EA386899E2D1B940FD400CDE3A7EE98250747B06DF04E7E6FEBC718401116F75E9AA4BE4B5E70888DAC0209C8E782D68C7F80BFDC9CB13117192AE8CD994D376CBE0B7D430EB53E12710A762B522B1A5D86BBA97EFE77542960E9F914E8BF2B6E959D88F6DBADC31C44E8D4AB0032C69E8AE0CFAD149E29BC6819239FC04D48310439B3719939715624DBE2105B809BE37DA913A2B4564F209063FE640257E970D640F2CB1883ABD96E708EE5BB9E94F63C5D19B0750AE453C23FB043180C4ADAF8C66886562CC1E3FE298AAC2632C6576C70F2717A3D9B70B8A7E39DE0A6C6335721E4C41A867E687F2747E12F0D0514FCC962A88D6EC62D393CEA3D049AE7815F98684DFEEDE5D7A78E5652FDA9EF405CB7875F0105AEEDFEBCEE2FBF355167C8218BB79D781A83A13220764B960D6A16EEFB6E59D77A62F690FB617E6FC4AB41E1ACAC54DADA6A762EA0FBC7A81E1D073B9A91DAB5DF7DB6CE464E3599F84D291B7BBE2B5A4FBAA2989B7F1312BA834E3D3F0147D05DD0924AF9FBBABFBECF66F9AA345D939E700BC89B92AB8C9FA2F0A96A5A082034830C336364A145FE5C5B7919A4BCDAFAF124D0C658DAA7AB24B4FDB92EC59B064A512A73F1428FB91373BC8CCC9443E062E96C4A2E2


638F3E2CCB705530974442C24F271C2B99DAADA640A2576F61EAAB69D9A19217C823F38566CA86D32CA36B14B3EF6A7322C7A55AD363D6B40531B1C2A3257C2113F9EA76660F6106C7D4CB33C302712F707876A2C58E8F748FC89E6988395A21AED1BCAF9C9EA7EBF7236BD554E3EAB06A53515EFC1B9729C5AF6A819032B09CD02B2700D5ED5CF490C408F599F14113D16E557DE7E0DB955AA33CCA5F7C9C7F41F9C719053DB2540588E6EE5BC11D53CE9F93390F1E02CB55DA98B82758C5A460753A82918E4280C80FFB0A6B4BE90996792606073CCEE7A17F3A3D50D4DD9A9DF49B94D213AC0DAD0E92524E645CBA04080F451D7C1200BBA3E73971B2E41AA9CAADBEB0D3F04989AA6AF80DEAD03D310A753EB947C64D4DF0B7407FEB24C242C504FA18AF6602F75F91ECC035DACFB63449B7F9E64F7681AE37A2F7707B79BBB284AEDE640822D1062BD0A62E8ADED96B8780E5C8904496325D03D32716A5B5F0F074855889E03E6B49CD8D20ACE25524C8FB62C71DBC1AE737E1079528A429303D6A4899618C77C210C6E1ABF2CF6FAA7DE6CFA668015A8F416BA48EDE5C12661336693932379E5BE5E43DF6F3F69C2E972363508CA6FEFEF70B8DFE5BF3E16E1F0068103AF4862E68398032CCA7CFBA57CCA617B4345B4528C98157E67927E71A73C8957408EE1A52EE217A4474B3FD9EE860DB12261E95264AC4723CBE67B27D82AAB6658907CDC47373A8EE9AA46196715B621846AAB30CE4448BF00EDD61F29F5CF12C6C6F8889E84FC25CAD1BB527DFED8D191BADA347F34F4EC605B125561F503F8AACC04E67329D75816B2C01A6E2E6477B206425407229DBE9203942ABCAFB530B9F77B68EA5BE0EC395D9DEB2F4D24531F1A8DB196E3A8B7292BD373265FF352D2D0E62F2F03E60F3AF0B96EE1D8B7484BE6E25DCF69E45B9F30C1EDE0B0846EB3088496A52CE287302CD422232AD153FB2DB4A486536628144A7403BD706C89B12D4F21EE4F4D9240A4B6B1CB28AB0D47A7E58F7DE2EF980E286F6DA09547FD2E1B4954013E709869C2AC554E5E54E10A7ED0B4E25350525E8AA720A90FF0E045DF79A17A046F845465A93B9B0E6520F85FA42796B5C1CD7C6E6439E10A97B1F235A86BC6162306610875B2AFC404523D4BF560419D2ABA44E833A82187AE4C1FF02A95040B422FBABA033EEC3E8A229220EBB5D15C48104BB01478C652A56C6E50C800DCC9C008C4AEB4D5A1FF83B35A6555AE2C13E93DC6A38198A02CC1997622A0F6AA6ADE7E9CABAC7FE171D4162699DCCF20F284741D40067F32B962EB689960BFFB63AC03BD47E2E748EC3C30C5BCB8A961D1E89EE75534BFB5944968FC083C9E41EFAA802B95313B03BBB775666E18A7FFB8A73231116E0FDC94D304D52AFECD46C51A313697FD6370A04D844B9F512B4972A2E32A3
3F139362DA3476CC80F57D7ABD0657729BEAB73BBF6E9DBE967F332A8EF2CFD9EB786D0B83DB00D47CD225B7F11EB16D6BE7CADC1A915258A5ECD1A4CFE0594DCA8347E503A8FBFD71395CB1EAF69F45E3E69AF223DB3930DD3CBCAD71F0B7620272452529BC4636708EFC669B86C50194AA29B3A850E442A31967F15D227BD3A525F9F3E919E96DE70CA86C62ECBF24A42169982433C72BFA0D42267D007387C6FF742A42BA3A088A5C4C523DD17DDE2D12779CD88FCE2DB650932874AE2C35A2121924F2DB895C19BE526509ABB39D3E73419DCADD7C5B06A17329B5469DD87E386AA7F5CD9ACD4804373DF325D99A9CD189BC91BAB116373159D5841AD7F4212203ABB436CFC01EF4DE7644649EA8B04CDCB6F13CCC739B2C95B5AE24B6F36B384F11
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%APLT1End
%RBIEndFontSubset
/OpenSans cguidfix
/F1.1/OpenSans renmfont
[ /CIEBasedA 5 dict dup begin /WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeA { 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
 exec} bind 
def 
/MatrixA [ 0.9642 1.0000 0.8249 ] def 
/RangeLMN [ 0.0 2.0000 0.0 2.0000 0.0 2.0000 ] def 
/DecodeLMN [ { 0.9857  mul} bind { 1.0000  mul} bind { 1.3202  mul} bind ] def 
end ] /Cs1 exch/ColorSpace dr pop
[ /CIEBasedABC 4 dict dup begin 
/WhitePoint [ 0.9505 1.0000 1.0891 ] def 
/DecodeABC [ 
{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 

{ 1.0 0.0 3 -1 roll 1 index 1 index le { exch pop} { pop } ifelse 
 1 index 1 index ge { exch pop } { pop } ifelse < 
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000001010101010101010101010101
0101010101010101010101010101010101010101010101020202020202020202
0202020202020202020202020202020202030303030303030303030303030303
0303030303030304040404040404040404040404040404040404050505050505
0505050505050505050506060606060606060606060606060607070707070707
0707070707070708080808080808080808080808090909090909090909090909
0a0a0a0a0a0a0a0a0a0a0a0b0b0b0b0b0b0b0b0b0b0b0c0c0c0c0c0c0c0c0c0c
0d0d0d0d0d0d0d0d0d0d0e0e0e0e0e0e0e0e0e0f0f0f0f0f0f0f0f0f10101010
1010101010111111111111111112121212121212121313131313131313141414
1414141414151515151515151616161616161616171717171717171818181818
18181919191919191a1a1a1a1a1a1a1b1b1b1b1b1b1c1c1c1c1c1c1c1d1d1d1d
1d1d1e1e1e1e1e1e1f1f1f1f1f1f202020202020212121212121222222222223
2323232323242424242425252525252526262626262727272727282828282829
292929292a2a2a2a2a2b2b2b2b2b2c2c2c2c2c2d2d2d2d2d2e2e2e2e2e2f2f2f
2f2f303030303131313131323232323333333333343434343535353535363636
36373737373838383839393939393a3a3a3a3b3b3b3b3c3c3c3c3d3d3d3d3e3e
3e3e3f3f3f3f4040404041414141424242424343434444444445454545464646
4647474748484848494949494a4a4a4b4b4b4b4c4c4c4d4d4d4d4e4e4e4f4f4f
4f50505051515151525252535353535454545555555656565657575758585859
59595a5a5a5a5b5b5b5c5c5c5d5d5d5e5e5e5f5f5f6060606061616162626263
63636464646565656666666767676868686969696a6a6a6b6b6b6c6c6d6d6d6e
6e6e6f6f6f707070717171727273737374747475757576767677777878787979
797a7a7b7b7b7c7c7c7d7d7e7e7e7f7f7f808081818182828283838484848585
86868687878888888989898a8a8b8b8b8c8c8d8d8d8e8e8f8f90909091919292
9293939494949595969697979798989999999a9a9b9b9c9c9c9d9d9e9e9f9f9f
a0a0a1a1a2a2a3a3a3a4a4a5a5a6a6a6a7a7a8a8a9a9aaaaabababacacadadae
aeafafb0b0b0b1b1b2b2b3b3b4b4b5b5b6b6b6b7b7b8b8b9b9bababbbbbcbcbd
bdbebebebfbfc0c0c1c1c2c2c3c3c4c4c5c5c6c6c7c7c8c8c9c9cacacbcbcccc
cdcdcececfcfd0d0d1d1d2d2d3d3d4d4d5d5d6d6d7d7d8d8d9d9dadadbdcdcdd
dddededfdfe0e0e1e1e2e2e3e3e4e4e5e6e6e7e7e8e8e9e9eaeaebebecededee
eeefeff0f0f1f1f2f3f3f4f4f5f5f6f6f7f8f8f9f9fafafbfcfcfdfdfefeffff
>  dup length 1 sub 3 -1 roll mul dup dup floor cvi exch ceiling 
 cvi 3 index exch get 4 -1 roll 3 -1 roll get
 dup 3 1 roll sub 3 -1 roll dup floor cvi sub mul add 255 div } bind 
] def 
/MatrixABC [ 0.4124 0.2126 0.0193 0.3576 0.7151 0.1192 0.1805 0.0722 0.9508 ] def 
/RangeLMN [ 0.0 0.9505 0.0 1.0000 0.0 1.0891 ] def 
end ] /Cs2 exch/ColorSpace dr pop
%%EndPageSetup
/Cs1 SC
1 sc
q
0 0 920 780 rc
0 780 m
920 780 l
920 0 l
0 0 l
h
f
/Cs2 SC
1 1 1 sc
0 780 m
920 780 l
920 0 l
0 0 l
h
0 780 m
f
7 w
1 J
1 j
0.60000002 i
0.72250301 0.74575597 0.75742799 sc
1 0 0 -1 0 780 cm
292.16534 554.6438 m
389.16644 460.625 l
S
579.604 421.24802 m
646.5 438.30872 l
S
342.6528 359.79745 m
269.5 340.51053 l
S
285.43878 232.5 m
383.88043 321.375 l
S
534.91467 321.375 m
629.26538 232.5 l
S
637.94507 554.6438 m
536.28424 460.625 l
S
649.0686 340.84915 m
579.25555 359.46567 l
S
461 653.5 m
461 460.625 l
S
272.9314 438.55392 m
342.33234 421.00562 l
S
0 i
0.87796402 0.90083998 0.976686 sc
CM
65.431396 363 m
255.4314 363 l
263.71567 363 270.4314 356.28427 270.4314 348 c
270.4314 278 l
270.4314 269.71573 263.71567 263 255.4314 263 c
65.431396 263 l
57.147121 263 50.431393 269.71573 50.431393 278 c
50.431393 348 l
50.431393 356.28427 57.147121 363 65.431396 363 c
h
65.431396 363 m
f
5 w
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
65.431396 417 m
255.4314 417 l
263.71567 417 270.4314 423.71573 270.4314 432 c
270.4314 502 l
270.4314 510.28427 263.71567 517 255.4314 517 c
65.431396 517 l
57.147121 517 50.431393 510.28427 50.431393 502 c
50.431393 432 l
50.431393 423.71573 57.147121 417 65.431396 417 c
h
65.431396 417 m
S
0.28848001 0.2906 0.48734999 sc
0 i
/F1.1[ 27 0 0 -27 0 0]sf
107.05103 459 m
(!"#$%&'"\()[ 19.656738 15.147949 11.021484 6.829102 12.854004 16.571777 9.531738 15.147949 0.000000 ] xS
94.671631 496 m
(\)*'"#+%'$",)[ 7.527832 16.571777 9.531738 15.147949 10.480957 15.016113 12.854004 9.531738 6.829102 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
590 650 m
780 650 l
788.2843 650 795 643.2843 795 635 c
795 565 l
795 556.7157 788.2843 550 780 550 c
590 550 l
581.7157 550 575 556.7157 575 565 c
575 635 l
575 643.2843 581.7157 650 590 650 c
h
590 650 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
590 130 m
780 130 l
788.2843 130 795 136.71573 795 145 c
795 215 l
795 223.28427 788.2843 230 780 230 c
590 230 l
581.7157 230 575 223.28427 575 215 c
575 145 l
575 136.71573 581.7157 130 590 130 c
h
590 130 m
S
0.28848001 0.2906 0.48734999 sc
0 i
621.74512 172 m
(-.,/#+0"*\()[ 17.085938 9.149414 12.880371 16.545410 10.480957 15.016113 13.631836 15.147949 16.571777 0.000000 ] xS
617.88232 209 m
(1+,'2"33"*)[ 13.526367 15.016113 12.880371 9.531738 6.829102 15.147949 14.791992 14.791992 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
366 124 m
556 124 l
564.2843 124 571 117.28427 571 109 c
571 39 l
571 30.715729 564.2843 24 556 24 c
366 24 l
357.71573 24 351 30.715729 351 39 c
351 109 l
351 117.28427 357.71573 124 366 124 c
h
366 124 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
366 656 m
556 656 l
564.2843 656 571 662.7157 571 671 c
571 741 l
571 749.2843 564.2843 756 556 756 c
366 756 l
357.71573 756 351 749.2843 351 741 c
351 671 l
351 662.7157 357.71573 656 366 656 c
h
366 656 m
S
0.28848001 0.2906 0.48734999 sc
0 i
362.70312 716.5 m
(45\(6$**"*&+2"*)[ 14.818359 15.437988 7.013672 17.494629 6.829102 16.571777 16.571777 15.147949 16.571777 16.571777 15.016113 6.829102 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
143 222.8562 m
333 222.8562 l
341.28427 222.8562 348 216.14047 348 207.8562 c
348 137.8562 l
348 129.57193 341.28427 122.8562 333 122.8562 c
143 122.8562 l
134.71573 122.8562 128 129.57193 128 137.8562 c
128 207.8562 l
128 216.14047 134.71573 222.8562 143 222.8562 c
h
143 222.8562 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
143 557.1438 m
333 557.1438 l
341.28427 557.1438 348 563.8595 348 572.1438 c
348 642.1438 l
348 650.42804 341.28427 657.1438 333 657.1438 c
143 657.1438 l
134.71573 657.1438 128 650.42804 128 642.1438 c
128 572.1438 l
128 563.8595 134.71573 557.1438 143 557.1438 c
h
143 557.1438 m
S
0.28848001 0.2906 0.48734999 sc
0 i
194.66553 599.1438 m
(4+7"*\()[ 14.818359 15.016113 25.114746 15.147949 16.571777 0.000000 ] xS
162.12842 636.1438 m
(8*'9$00"2"*)[ 16.308105 16.571777 9.531738 21.001465 6.829102 14.172363 13.631836 15.147949 6.829102 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
132.2876 650 m
322.2876 650 l
330.57187 650 337.2876 643.2843 337.2876 635 c
337.2876 565 l
337.2876 556.7157 330.57187 550 322.2876 550 c
132.2876 550 l
124.00333 550 117.2876 556.7157 117.2876 565 c
117.2876 635 l
117.2876 643.2843 124.00333 650 132.2876 650 c
h
132.2876 650 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
132.2876 130 m
322.2876 130 l
330.57187 130 337.2876 136.71573 337.2876 145 c
337.2876 215 l
337.2876 223.28427 330.57187 230 322.2876 230 c
132.2876 230 l
124.00333 230 117.2876 223.28427 117.2876 215 c
117.2876 145 l
117.2876 136.71573 124.00333 130 132.2876 130 c
h
132.2876 130 m
S
0.28848001 0.2906 0.48734999 sc
0 i
194.88892 172 m
(:"#0\()[ 24.455566 15.147949 11.021484 14.172363 0.000000 ] xS
149.67578 209 m
(;#3+*$,"#"*)[ 21.027832 10.757812 14.791992 15.016113 16.571777 6.829102 12.880371 15.147949 10.480957 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
599.7124 222.8562 m
789.7124 222.8562 l
797.9967 222.8562 804.7124 216.14047 804.7124 207.8562 c
804.7124 137.8562 l
804.7124 129.57193 797.9967 122.8562 789.7124 122.8562 c
599.7124 122.8562 l
591.42816 122.8562 584.7124 129.57193 584.7124 137.8562 c
584.7124 207.8562 l
584.7124 216.14047 591.42816 222.8562 599.7124 222.8562 c
h
599.7124 222.8562 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
599.7124 557.1438 m
789.7124 557.1438 l
797.9967 557.1438 804.7124 563.8595 804.7124 572.1438 c
804.7124 642.1438 l
804.7124 650.42804 797.9967 657.1438 789.7124 657.1438 c
599.7124 657.1438 l
591.42816 657.1438 584.7124 650.42804 584.7124 642.1438 c
584.7124 572.1438 l
584.7124 563.8595 591.42816 557.1438 599.7124 557.1438 c
h
599.7124 557.1438 m
S
0.28848001 0.2906 0.48734999 sc
0 i
606.46802 599.1438 m
(-+*<+3"#,\(1+*\()[ 17.085938 15.016113 16.571777 6.829102 15.016113 14.791992 15.147949 11.021484 12.880371 7.013672 13.526367 15.016113 16.571777 0.000000 ] xS
602.57886 636.1438 m
(,+7"*9"#0$*3)[ 12.880371 15.016113 25.114746 15.147949 16.571777 21.001465 15.147949 11.021484 14.172363 6.829102 16.571777 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
666.5686 519.15039 m
856.5686 519.15039 l
864.85291 519.15039 871.5686 512.43463 871.5686 504.15039 c
871.5686 434.15039 l
871.5686 425.86612 864.85291 419.15039 856.5686 419.15039 c
666.5686 419.15039 l
658.28436 419.15039 651.5686 425.86612 651.5686 434.15039 c
651.5686 504.15039 l
651.5686 512.43463 658.28436 519.15039 666.5686 519.15039 c
h
666.5686 519.15039 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
666.5686 260.84961 m
856.5686 260.84961 l
864.85291 260.84961 871.5686 267.56534 871.5686 275.84961 c
871.5686 345.84961 l
871.5686 354.13388 864.85291 360.84961 856.5686 360.84961 c
666.5686 360.84961 l
658.28436 360.84961 651.5686 354.13388 651.5686 345.84961 c
651.5686 275.84961 l
651.5686 267.56534 658.28436 260.84961 666.5686 260.84961 c
h
666.5686 260.84961 m
S
0.28848001 0.2906 0.48734999 sc
0 i
682.92847 302.84961 m
(;#3+*$,+'$",\()[ 21.027832 10.757812 14.791992 15.016113 16.571777 6.829102 12.880371 15.016113 9.531738 6.829102 15.147949 12.880371 0.000000 ] xS
710.02075 339.84961 m
(68=9"*)[ 17.494629 16.308105 16.571777 21.001465 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
62 519.15039 m
252 519.15039 l
260.28427 519.15039 267 512.43463 267 504.15039 c
267 434.15039 l
267 425.86612 260.28427 419.15039 252 419.15039 c
62 419.15039 l
53.715729 419.15039 47 425.86612 47 434.15039 c
47 504.15039 l
47 512.43463 53.715729 519.15039 62 519.15039 c
h
62 519.15039 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
62 260.84961 m
252 260.84961 l
260.28427 260.84961 267 267.56534 267 275.84961 c
267 345.84961 l
267 354.13388 260.28427 360.84961 252 360.84961 c
62 360.84961 l
53.715729 360.84961 47 354.13388 47 345.84961 c
47 275.84961 l
47 267.56534 53.715729 260.84961 62 260.84961 c
h
62 260.84961 m
S
0.28848001 0.2906 0.48734999 sc
0 i
100.02051 302.84961 m
(>"#3+?"#\()[ 15.530273 15.147949 10.757812 14.791992 15.016113 16.545410 15.147949 11.021484 0.000000 ] xS
78.808105 339.84961 m
(;/28,,$*3"*)[ 21.027832 16.545410 6.829102 16.308105 12.880371 12.880371 6.829102 16.571777 14.791992 15.147949 0.000000 ] xS
0.87796402 0.90083998 0.976686 sc
CM
664 363 m
854 363 l
862.2843 363 869 356.28427 869 348 c
869 278 l
869 269.71573 862.2843 263 854 263 c
664 263 l
655.7157 263 649 269.71573 649 278 c
649 348 l
649 356.28427 655.7157 363 664 363 c
h
664 363 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
664 417 m
854 417 l
862.2843 417 869 423.71573 869 432 c
869 502 l
869 510.28427 862.2843 517 854 517 c
664 517 l
655.7157 517 649 510.28427 649 502 c
649 432 l
649 423.71573 655.7157 417 664 417 c
h
664 417 m
S
0.28848001 0.2906 0.48734999 sc
0 i
686.80005 459 m
(;#3+*$,+'$"\()[ 21.027832 10.757812 14.791992 15.016113 16.571777 6.829102 12.880371 15.016113 9.531738 6.829102 15.147949 0.000000 ] xS
699.75293 496 m
(4'#=%'==#)[ 14.818359 9.531738 11.021484 16.571777 12.854004 9.531738 16.571777 16.571777 0.000000 ] xS
7 w
0.60000002 i
0.72250301 0.74575597 0.75742799 sc
461 321.375 m
461 127.5 l
S
0 i
0.87796402 0.90083998 0.976686 sc
CM
366 755 m
556 755 l
564.2843 755 571 748.2843 571 740 c
571 670 l
571 661.7157 564.2843 655 556 655 c
366 655 l
357.71573 655 351 661.7157 351 670 c
351 740 l
351 748.2843 357.71573 755 366 755 c
h
366 755 m
f
5 w
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
366 25 m
556 25 l
564.2843 25 571 31.715729 571 40 c
571 110 l
571 118.28427 564.2843 125 556 125 c
366 125 l
357.71573 125 351 118.28427 351 110 c
351 40 l
351 31.715729 357.71573 25 366 25 c
h
366 25 m
S
0.28848001 0.2906 0.48734999 sc
0 i
371.4043 67 m
(4+7"*9"#0"*\()[ 14.818359 15.016113 25.114746 15.147949 16.571777 21.001465 15.147949 11.021484 13.631836 15.147949 16.571777 0.000000 ] xS
393.99438 104 m
("*\(3#8"$"*)[ 15.147949 16.571777 7.013672 14.791992 10.480957 16.308105 15.147949 6.829102 15.147949 0.000000 ] xS
0.44610599 0.69710302 0.56377202 sc
CM
377.09375 456.125 m
544.90625 456.125 l
564.75604 456.125 580.86609 426.05301 580.86609 389 c
580.86609 351.94699 564.75604 321.875 544.90625 321.875 c
377.09375 321.875 l
357.24393 321.875 341.13394 351.94699 341.13394 389 c
341.13394 426.05301 357.24393 456.125 377.09375 456.125 c
h
377.09375 456.125 m
f
0.60000002 i
0.99999601 1 1 sc
1 0 0 -1 0 780 cm
377.09375 323.875 m
544.90625 323.875 l
564.75604 323.875 580.86609 353.94699 580.86609 391 c
580.86609 428.05301 564.75604 458.125 544.90625 458.125 c
377.09375 458.125 l
357.24393 458.125 341.13394 428.05301 341.13394 391 c
341.13394 353.94699 357.24393 323.875 377.09375 323.875 c
h
377.09375 323.875 m
S
0.93356001 0.95907998 0.94506001 sc
0 i
/F1.1[ 33 0 0 -33 0 0]sf
389.43286 381 m
(@"\(A"1"*\()[ 24.057129 18.514160 8.572266 18.836426 17.853516 16.532227 18.514160 20.254395 0.000000 ] xS
390.76221 426 m
(B#$*%$/",)[ 19.867676 13.470703 8.346680 20.254395 15.710449 8.346680 20.222168 18.514160 0.000000 ] xS
ep
end
%%Trailer
%%EOF
